###
# CoffeeDoc example documentation #

This is a module-level docstring, and will be displayed at the top of the module documentation.
Documentation generated by [CoffeeDoc](http://github.com/omarkhan/coffeedoc)
###

class ConveyorModel
  ###
  This docstring documents MyClass. It can include *Markdown* syntax,
  which will be converted to html.
  ###
  # @data: test: true
  @_refCount = 0
  constructor: (data)->
    @_ref = @constructor._refCount++
    @data = {}
    @interfaces = {}
    # console.log @
    @sync(data)

  save: ()->
    ### Save documentation goes here. ###
  remove: ()->
  @list: (params)->
    # returns a conveyor belt
    @firstInterface('list').list(params).then (arr)=>
      out = []
      # console.info arr
      for item in arr
        out.push @sync item
      hm = @_collectionize out

  @sync: (data)->
    pk = data[@primaryKey]
    if not pk
      throw "You can only sync models with a primary key."
    if not @index["#{@name}_#{pk}"]?
      return @index["#{@name}_#{pk}"] = new @$self data
    else
      return @index["#{@name}_#{pk}"].sync data
  sync: (data)->
    for key of data
      val = data[key]
      conf = @fields[key]
      if conf?
        if ConveyorValue[conf.type]?
          @data[key] = new ConveyorValue[conf.type](val,@,conf)

      if not @data[key]?
        console.warn 'ConveyorModel::constructor ignoring key: ',key,data[key]
    @
  get: (key)->
    if @data[key]
      return @data[key].get()
    else
      return null
  set: (key,value)->
    if @data[key]
      return @data[key].set(value)
    else
      return null
    
  @_collectionize: (arr)->
    arr.$changed = ->
      @.filter (model)->
        model.dirty
    arr

  @create: (params)->
  @addInterface: (name,$interface)->
    @interfaces[name] = $interface;
  addInterface: (name,$interface)->
    @interfaces[name] = $interface;

  @firstInterface: (action)->
    for x of @interfaces
      $intfc = @interfaces[x]
      if $intfc.actions.indexOf(action) isnt -1
        return $intfc
    throw "No interface available with the ability to: #{action}"


  fields: {}
  @primaryKey: 'id'
  @index: {}



root = exports ? window
root.ConveyorModel = ConveyorModel